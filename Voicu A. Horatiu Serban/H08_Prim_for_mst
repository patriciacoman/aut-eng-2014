#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define INF INT_MAX

void mstPrim(int V, int G[V][V], int r)
{
    int cost[V],parent[V],Q[V];
    int A[V][V];
    int i,j;
    for (i=0; i<V; i++)
    {
        for (j=0; j<V; j++)
        {
            A[i][j]=0;
        }
    }
    for (i=0; i<V; i++)
    {
        cost[i]=INF;
        parent[i]=-1; /* parent = -1 means that parent = null */
    }
    cost[r]=0;   /* the cost for the start node is 0,the other costs are inf */
    for (i=0; i<V; i++)
    {
        Q[i]=i; /* put all the vertices in queue */
    }
    int count=V;
    while (count != 0)
    {
        int min=INF;
        int u=0;
        for (i=0; i<V; i++)
        {
            if ((Q[i]!=-2) && (cost[i]<min))
                {
                    min=cost[i];
                    u=i;
                }
        }
        Q[u]=-2;
        /* consider the node N removed from the queue when Q[N] == -2 */
        if (parent[u]!=-1)
        {/* if the founded node, 'u' , has a parent */
            A[u][parent[u]]=1;  /* add the edge between 'u' and the parent of 'u' to the 'A' matrix */
        }
        for (i=0; i<V; i++)
        {
            if (G[u][i]!=0)
            {/* if 'u' is connected to 'i' */
                if ((Q[i]!=-2) && (G[u][i]<cost[i]))

                    {
                        parent[i]=u;
                        cost[i]=G[u][i];
                    }
            }
        count--;
        }
    }

    for (i=0; i<V; i++)
    {
        for (j=0; j<V; j++)
        {
            if (A[i][j]==1)
            {
                    printf("%d %d\n",i,j);
            }
        }
    }
}


int main()
{


    FILE *f;
    f=fopen("graph.txt", "r");
    if (f==NULL)
    {
        printf("Error!");
    }
    else
    {
        int V;
        fscanf(f,"%d\n",&V);
        int G[V][V];
        int i,j;
        for (i=0; i<V; i++)
            for (j=0; j<V; j++)
                fscanf(f,"%d ",&G[i][j]);
        fclose(f);

        mstPrim(V,G,0);
    }

    return 0;
}
