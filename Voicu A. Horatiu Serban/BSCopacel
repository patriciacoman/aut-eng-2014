#include <stdio.h>
#include <stdlib.h>


typedef struct BSTNode
{
    struct BSTNode *left;
    struct BSTNode *right;
    int data;
} BSTNodeT;

BSTNodeT *root;

void insert(data)
{
    BSTNodeT *p, *q;
    p=(BSTNodeT*)malloc(sizeof(BSTNodeT));
    p->data=data;
    p->left=NULL;
    p->right=NULL;
    if (root==NULL)
    {
        root=p;
        return;
    }
    q=root;
    for (;;)
    {
        if (data < q->data)
        {
            if (q->left==NULL)
            {
                q->left=p;
                return;
            }
            else q=q->left;
        }
        else if(data > q->data)
        {
            if(q->right==NULL)
            {
                q->right=p;
                return;
            }
            else q=q->right;
        }
        else
        {
            printf("This node already exists\n");
            free(p);
            return;
        }
    }

}

BSTNodeT *find(BSTNodeT *root, int data)
{
    BSTNodeT *p;
    if (root == NULL)
    {
        return NULL;
    }
    p=root;
    while (p!=NULL)
    {
        if (p->data==data)
        {
            return p;
        }
        else if (data < p->data)
        {
            p=p->left;
        }
        else
        {
            p=p->right;
        }

    }
    return NULL;
}

void show(BSTNodeT *p, int level)
{
    int i;
    if (p!=NULL)
    {
        show(p->left, level+1);
        for (i=0; i<=level; i++)
        {
            printf(" ");
        }
        printf("%d",p->data);
        show(p->right,level+1);
    }
}

BSTNodeT *deleteit(BSTNodeT *root, int data)
{
    BSTNodeT *p;
    BSTNodeT *prev;
    BSTNodeT *temp;
    BSTNodeT *temprev;
    int dir; //0 means left and 1 means right
    p=root;
    prev=NULL;
    while (p!=NULL && p->data!=data)
    {
        if (data<p->data)
        {
            prev=p;
            p=p->left;
            dir=0;
        }
        else
        {
            prev=p;
            p=p->right;
            dir=1;
        }
    }
    if (p==NULL)
    {
        printf("\n 404! \n");
        return root;
    }
    if (p->left==NULL)
    {
        temp=p->right;
    }
    else
        if (p->right=NULL)
    {
        temp=p->left;
    }
    else
    {
        temprev=p;
        temp=p->right;
        while(temp->left!=NULL)
        {
            temprev=temp;
            temp=temp->left;
        }
        if (temprev!=p)
        {
            temprev->left=temp->right;
            temp->right=p->right;
        }
        temp->left=p->left;
    }
    free(p);
    printf("\nFenomene paranormale in C. Daca nu pun acest mesaj da crash\n");
    if (temp==NULL)
    {
        return temp;
    }
    else
    {
        if(dir==0)
        {
            prev->left=temp;
        }
        else
        {
            prev->right=temp;
        }
    return root;
    }
}

int main()
{
    int data,k;
    char option;
    printf("Hello world!\n");
    printf("Chose an option:\n");
    printf("I. INSERT     D. DELETE     F. FIND     S. SHOW     Q. QUIT\n");

    while (option!='Q')
    {
        scanf("%c",&option);
        switch (option)
        {
        case 'I':
            printf("INSERT\n");
            while (data!=0)
            {
                scanf("%d",&data);
                insert(data);
            }
            break;
        case 'D':
            printf("DELETE\n");
            scanf("%d",&data);
            deleteit(root,data);
            break;
        case 'F':
            printf("FIND\n");
            scanf("%d",&data);
            k=find(root,data);
            if (k!=NULL)
            {
                printf("EUREKA!\n");
            }
            else
            {
                printf("404 Not found :(\n");
            }
            break;
        case 'S':
            printf("SHOW\n");
            show(root,0);
            printf("\n");
            break;
        case 'Q':
            exit(0);
            break;
        default:
            printf("Choose another option:\n");
            printf("I. INSERT     D. DELETE     F. FIND     S. SHOW     Q. QUIT\n");
        }
    }
    return 0;
}
